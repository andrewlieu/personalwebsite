{"version":3,"sources":["CenterBox/codebase.PNG","CenterBox/binarytree.PNG","CenterBox/portal.PNG","CenterBox/toysrus.png","CenterBox/LiveWell.png","CenterBox/biomass.png","CenterBox/binary.PNG","CenterBox/centerbox.jsx","TopBar/topbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TopBar","react_default","a","createElement","className","href","Component","CenterBox","id","src","codebase","binarytree","portal","accordion","document","getElementsByClassName","i","length","onclick","console","log","contents","this","nextElementSibling","style","maxHeight","scrollHeight","App","BrowserRouter","TopBar_topbar","CenterBox_centerbox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qKCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0EC0CxC,oFCReC,gMA5BX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SAAjB,eAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAO,UAAV,aADJ,KAEIJ,EAAAC,EAAAC,cAAA,KAAGE,KAAO,QAAV,gBAFJ,KAGIJ,EAAAC,EAAAC,cAAA,KAAGE,KAAO,SAAV,eAEJJ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBAAjB,oBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBAAjB,2BAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBAAjB,4BApBWE,mGDKfC,mLAKF,OACCN,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aAEVH,EAAAC,EAAAC,cAAA,UAAQC,UAAY,QAAQI,GAAG,SAA/B,YACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBAAjB,4FACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAY,eAAeI,GAAG,OAAtC,cACEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,MACZT,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBAAjB,sdACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAY,eAAeI,GAAG,QAAtC,YACEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKE,MACZV,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBAAjB,oGACAH,EAAAC,EAAAC,cAAA,OAAKM,IAAOG,MACZX,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBAAjB,6HAjBYE,aA+BpBO,EAAYC,SAASC,uBAAuB,SAEvCC,EAAI,EAAGA,EAAIH,EAAUI,OAAOD,IACnCH,EAAUG,GAAGE,QAAU,WACrBC,QAAQC,IAAI,SACZ,IAAIC,EAAWC,KAAKC,mBAChBF,EAASG,MAAMC,UACjBJ,EAASG,MAAMC,UAAY,KAE3BJ,EAASG,MAAMC,UAAYJ,EAASK,aAAe,MAS1CnB,gBEjCAoB,mLAlBX,OACE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACjBH,EAAAC,EAAAC,cAAC0B,EAAD,OAEA5B,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACjBH,EAAAC,EAAAC,cAAC2B,EAAD,gBAXQxB,aCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASxB,SAASyB,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc8c1afc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/codebase.0fd77b9a.PNG\";","module.exports = __webpack_public_path__ + \"static/media/binarytree.7a14baaf.PNG\";","module.exports = __webpack_public_path__ + \"static/media/portal.41f0bbe3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/toysrus.35c00516.png\";","module.exports = __webpack_public_path__ + \"static/media/LiveWell.38c5e352.png\";","module.exports = __webpack_public_path__ + \"static/media/biomass.c79b0099.png\";","module.exports = __webpack_public_path__ + \"static/media/binary.f7976380.PNG\";","import React, { Component } from 'react';\r\nimport './centerbox.css';\r\nimport toysrus from './toysrus.png';\r\nimport livewell from './LiveWell.png';\r\nimport biomass from './biomass.png';\r\nimport codebase from './codebase.PNG';\r\nimport binary from './binary.PNG';\r\nimport binarytree from './binarytree.PNG';\r\nimport portal from './portal.PNG';\r\nclass CenterBox extends Component {\r\n\r\n\r\n  \r\n  render() {\r\n    return (\r\n     <div className = \"centerbox\">\r\n    \r\n            <button className = \"image\" id=\"abtme\">about me</button>\r\n            <div className = \"image-content\">Hello, my name is Andrew and I'm a second year at UC Berkeley studying computer science.</div>\r\n            <button className = \"image image2\" id=\"exp\">experience</button>\r\n              <img src={codebase}></img>\r\n            <div className = \"image-content\">Phasellus lobortis sem magna, nec venenatis est varius et. Morbi scelerisque, ante vitae commodo rhoncus, ipsum turpis elementum ipsum, et lacinia quam arcu quis risus. Sed ut luctus sapien, efficitur ultricies sapien. Duis ultricies imperdiet enim, accumsan varius turpis placerat id. Curabitur ut orci pretium, varius est eget, mattis libero. Vestibulum non nibh ante. Aliquam at dapibus quam. Curabitur sollicitudin nibh dolor, sed porttitor libero lacinia vitae.</div>\r\n            <button className = \"image image3\" id=\"proj\">projects</button>\r\n              <img src={binarytree}></img>\r\n            <div className = \"image-content\">Created an interactive binary search tree visualizer to teach students to understand algorithms.</div>\r\n            <img src = {portal}></img>\r\n            <div className = \"image-content\">Creating and implementing a student-teacher portal that tracks student's progress for Ygnacio Valley High School.</div>\r\n\r\n\r\n\r\n\r\n     </div>\r\n\r\n    )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nvar accordion = document.getElementsByClassName(\"image\")\r\n\r\nfor (var i = 0; i < accordion.length;i++){\r\n  accordion[i].onclick = function () {\r\n    console.log(\"click\");\r\n    var contents = this.nextElementSibling;\r\n    if (contents.style.maxHeight) {\r\n      contents.style.maxHeight = null;\r\n    } else {\r\n      contents.style.maxHeight = contents.scrollHeight + \"px\";\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default CenterBox;\r\n\r\n","import React, { Component } from 'react';\r\nimport './topbar.css';\r\n\r\n\r\nclass TopBar extends Component {\r\n  render() {\r\n    return ( \r\n      <div>\r\n        <div className = \"topbar\">\r\n        <div className = \"title\">\r\n            andrew lieu\r\n        </div>\r\n        <div className = \"title-directory\">\r\n            <a href = \"#abtme\">about me </a> | \r\n            <a href = \"#exp\"> experience </a> | \r\n            <a href = \"#proj\"> projects </a> \r\n        </div>\r\n        <div className = \"information\">\r\n          <div className = \"information-text\">\r\n            computer science\r\n          </div>\r\n          <div className = \"information-text\">\r\n            andrewlieu@berkeley.edu\r\n          </div>\r\n          <div className = \"information-text\">\r\n            (626) 278-1356\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default TopBar;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from './TopBar/topbar';\nimport CenterBox from './CenterBox/centerbox';\nimport {BrowserRouter,Route} from 'react-router-dom';\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <div className=\"App\">\n          </div>\n          <div className = \"TopBar\">\n          <TopBar/>\n          </div>\n          <div className = \"CenterBox\">\n          <CenterBox/>\n          </div>\n        </div>\n      </BrowserRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}